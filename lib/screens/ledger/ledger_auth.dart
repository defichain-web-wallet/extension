import 'dart:async';
import 'package:defi_wallet/config/config.dart';
import 'package:defi_wallet/screens/auth_screen/auth_screen.dart';
import 'package:defi_wallet/screens/ledger/screens/ledger_congratulations.dart';
import 'package:defi_wallet/utils/app_theme/app_theme.dart';
import 'package:defi_wallet/widgets/buttons/accent_button.dart';
import 'package:defi_wallet/widgets/buttons/primary_button.dart';
import 'package:defi_wallet/widgets/responsive/stretch_box.dart';
import 'package:defi_wallet/widgets/toolbar/welcome_app_bar.dart';
import 'package:flutter/material.dart';

class LedgerAuth extends StatefulWidget {
  String? currentStatus;
  bool? isVisibleButtons;

  LedgerAuth({
    Key? key,
    this.currentStatus = 'first-step',
    this.isVisibleButtons = true,
  }) : super(key: key);

  @override
  State<LedgerAuth> createState() => _LedgerAuthState();
}

class _LedgerAuthState extends State<LedgerAuth> {
  String firstStep =
      '1. When you connect Jellywallet to your ledger device, your recovery phrase is not stored or generated by Jellywallet.';
  String secondStep =
      '2. If your Ledger is lost or defect you will need to set up a replacement device with your recovery phrase obtained through Ledger itself.';
  String thirdStep =
      '3. Make sure you have installed the DeFiChain App on your ledger device and you still have access to your recovery phrase.';
  String nowConnect =
      'Now connect your ledger device and open the DeFiChain App';
  String loadingFirstText =
      'One second, Jelly is searching for your addresses!...';
  String loadingSecondText = 'Ugh.. What a mess...';
  String loadingThirdText = 'Okay, almost done...';

  double stepContentWidth = 340;
  List<String> statusList = [
    'first-step',
    'second-step',
    'third-step',
    'now-connect',
    'loading-first',
    'loading-second',
    'loading-third',
  ];

  @override
  Widget build(BuildContext context) {
    //DEMONSTRATION
    print(widget.currentStatus);
    Timer(Duration(seconds: 5), () {
      getUpdateStatus(widget.currentStatus);
    });
    // getUpdateStatus(widget.currentStatus);

    //DEMONSTRATION
    return Scaffold(
      appBar: WelcomeAppBar(),
      body: Padding(
        padding: const EdgeInsets.symmetric(vertical: 24, horizontal: 16),
        child: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Expanded(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: [
                    Container(
                      child: Image.asset(
                        'assets/images/ledger_logo.png',
                        width: 180,
                      ),
                    ),
                    SizedBox(
                      height: 35,
                    ),
                  ],
                ),
              ),
              Expanded(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Container(
                      child: getStepOrStatus(widget.currentStatus),
                    ),
                    Column(
                      children: [
                        if (widget.isVisibleButtons!)
                          Container(
                            width: stepContentWidth,
                            child: Row(
                              children: [
                                Expanded(
                                  child: StretchBox(
                                    maxWidth: ScreenSizes.xSmall,
                                    child: AccentButton(
                                      label: 'Back',
                                      callback: () {
                                        if (widget.currentStatus !=
                                            'first-step') {
                                          int index = statusList
                                              .indexOf(widget.currentStatus!);
                                          String previousStatus =
                                              statusList[index - 1];
                                          Navigator.push(
                                            context,
                                            PageRouteBuilder(
                                              pageBuilder: (context, animation1,
                                                      animation2) =>
                                                  LedgerAuth(
                                                currentStatus: previousStatus,
                                              ),
                                              transitionDuration: Duration.zero,
                                              reverseTransitionDuration:
                                                  Duration.zero,
                                            ),
                                          );
                                        } else {
                                          Navigator.push(
                                            context,
                                            PageRouteBuilder(
                                              pageBuilder: (context, animation1,
                                                      animation2) =>
                                                  AuthScreen(),
                                              transitionDuration: Duration.zero,
                                              reverseTransitionDuration:
                                                  Duration.zero,
                                            ),
                                          );
                                        }
                                      },
                                    ),
                                  ),
                                ),
                                SizedBox(
                                  width: 20,
                                ),
                                Expanded(
                                  child: StretchBox(
                                    maxWidth: ScreenSizes.xSmall,
                                    child: PrimaryButton(
                                      isCheckLock: false,
                                      label: 'Next',
                                      callback: () {
                                        if (widget.currentStatus !=
                                            'third-step') {
                                          int index = statusList
                                              .indexOf(widget.currentStatus!);
                                          String nextStatus =
                                              statusList[index + 1];
                                          Navigator.push(
                                            context,
                                            PageRouteBuilder(
                                              pageBuilder: (context, animation1,
                                                      animation2) =>
                                                  LedgerAuth(
                                                currentStatus: nextStatus,
                                              ),
                                              transitionDuration: Duration.zero,
                                              reverseTransitionDuration:
                                                  Duration.zero,
                                            ),
                                          );
                                        } else {
                                          Navigator.push(
                                            context,
                                            PageRouteBuilder(
                                              pageBuilder: (context, animation1,
                                                      animation2) =>
                                                  LedgerAuth(
                                                currentStatus: 'now-connect',
                                                isVisibleButtons: false,
                                              ),
                                              transitionDuration: Duration.zero,
                                              reverseTransitionDuration:
                                                  Duration.zero,
                                            ),
                                          );
                                        }
                                      },
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ),
                        // SizedBox(height: 20),
                        // Row(
                        //   mainAxisAlignment: MainAxisAlignment.center,
                        //   children: [
                        //     Text(
                        //       'Do you need help? Join us on ',
                        //       style: Theme.of(context).textTheme.subtitle1,
                        //     ),
                        //     InkWell(
                        //       child: Text(
                        //         'Telegram',
                        //         style: AppTheme.defiUnderlineText,
                        //       ),
                        //       onTap: () =>
                        //           ScaffoldMessenger.of(context).showSnackBar(
                        //         SnackBar(
                        //           content: Text(
                        //             'Work in progress',
                        //             style: TextStyle(color: Colors.black),
                        //           ),
                        //         ),
                        //       ),
                        //     ),
                        //   ],
                        // ),
                      ],
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  getStepOrStatus(status) {
    switch (status) {
      case 'first-step':
        return Container(
          width: stepContentWidth,
          child: Text(
            firstStep,
            softWrap: true,
            textAlign: TextAlign.center,
            style: Theme.of(context).textTheme.headline2,
          ),
        );
      case 'second-step':
        return Container(
          width: stepContentWidth,
          child: Text(
            secondStep,
            softWrap: true,
            textAlign: TextAlign.center,
            style: Theme.of(context).textTheme.headline2,
          ),
        );
      case 'third-step':
        return Container(
          width: stepContentWidth,
          child: Text(
            thirdStep,
            softWrap: true,
            textAlign: TextAlign.center,
            style: Theme.of(context).textTheme.headline2,
          ),
        );
      case 'now-connect':
        return Column(
          children: [
            Container(
              width: stepContentWidth,
              child: Text(
                nowConnect,
                softWrap: true,
                textAlign: TextAlign.center,
                style: Theme.of(context).textTheme.headline2,
              ),
            ),
            SizedBox(
              height: 30,
            ),
            Image.asset(
              'assets/images/ledger_light.png',
              width: double.infinity,
            ),
          ],
        );
      case 'loading-first':
        return Container(
          width: stepContentWidth,
          child: Text(
            loadingFirstText,
            softWrap: true,
            textAlign: TextAlign.center,
            style: Theme.of(context).textTheme.headline2,
          ),
        );
      case 'loading-second':
        return Container(
          width: stepContentWidth,
          child: Text(
            loadingSecondText,
            softWrap: true,
            textAlign: TextAlign.center,
            style: Theme.of(context).textTheme.headline2,
          ),
        );
      case 'loading-third':
        return Container(
          width: stepContentWidth,
          child: Text(
            loadingThirdText,
            softWrap: true,
            textAlign: TextAlign.center,
            style: Theme.of(context).textTheme.headline2,
          ),
        );
    }
  }

  getUpdateStatus(currentStatus) {
    if (currentStatus == 'now-connect') {
      setState(() {
        widget.currentStatus = 'loading-first';
      });
    }
    if (currentStatus == 'loading-first') {
      setState(() {
        widget.currentStatus = 'loading-second';
      });
    }
    if (currentStatus == 'loading-second') {
      Navigator.push(
        context,
        PageRouteBuilder(
          pageBuilder: (context, animation1, animation2) =>
              LedgerCongratulations(),
          transitionDuration: Duration.zero,
          reverseTransitionDuration: Duration.zero,
        ),
      );
    }
  }
}
